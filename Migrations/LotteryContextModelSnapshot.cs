// <auto-generated />
using System;
using Lottery.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lottery.Migrations
{
    [DbContext(typeof(LotteryContext))]
    partial class LotteryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lottery.Models.Contestant", b =>
                {
                    b.Property<string>("ContestantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("ContestantId");

                    b.ToTable("Contestant");
                });

            modelBuilder.Entity("Lottery.Models.Draw", b =>
                {
                    b.Property<long>("DrawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DrawId"));

                    b.Property<DateTime>("DrawDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Drawn")
                        .HasColumnType("boolean");

                    b.Property<string>("WinningSequence")
                        .HasColumnType("text");

                    b.HasKey("DrawId");

                    b.ToTable("Draws");
                });

            modelBuilder.Entity("Lottery.Models.Status", b =>
                {
                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StatusId"));

                    b.Property<long>("DrawInterval")
                        .HasColumnType("bigint");

                    b.Property<long>("LatestFinishedDrawId")
                        .HasColumnType("bigint");

                    b.Property<long>("NextDrawId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("NextDrawTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Lottery.Models.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("ContestantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DrawId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasWin")
                        .HasColumnType("boolean");

                    b.Property<string>("TicketSequence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TicketId");

                    b.HasIndex("ContestantId");

                    b.HasIndex("DrawId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Lottery.Models.Ticket", b =>
                {
                    b.HasOne("Lottery.Models.Contestant", "Contestant")
                        .WithMany("Tickets")
                        .HasForeignKey("ContestantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lottery.Models.Draw", "Draw")
                        .WithMany("Tickets")
                        .HasForeignKey("DrawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contestant");

                    b.Navigation("Draw");
                });

            modelBuilder.Entity("Lottery.Models.Contestant", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Lottery.Models.Draw", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
